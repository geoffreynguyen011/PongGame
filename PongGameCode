/*	Partner(s) Name & E-mail: Geoffrey Nguyen gnguy011@ucr.edu
 *	Lab Section: B21
 *	Assignment: Final Project
 *	Exercise Description: [optional - include for your own benefit]
 *	
 *	I acknowledge all content contained herein, excluding template or example
 *	code, is my own original work.
 */

#include <avr/io.h>
#include <avr/interrupt.h>
#include <bit.h>
#include <timer.h>
#include <stdio.h>
#include "io.c"

#define oneSec 2
#define buttonPushRight ~PINC & 0x01
#define buttonPushLeft ~PINC & 0x02
#define player2PushRight ~PINC & 0x04
#define player2PushLeft ~PINC & 0x08
#define startButton ~PINC & 0x40
#define resetButton ~PINC & 0x80
//1 being the most right
#define platformPos1 0xF8
#define platformPos2 0xF1
#define platformPos3 0xE3
#define platformPos4 0xC7
#define platformPos5 0x8F
#define platformPos6 0x1F
//1 being the most left
#define ballPos1 0x7F
#define ballPos2 0xBF
#define ballPos3 0xDF
#define ballPos4 0xEF
#define ballPos5 0xF7
#define ballPos6 0xFB
#define ballPos7 0xFD
#define ballPos8 0xFE
#define ms500 100

unsigned char ballLocationB = 0xEF;
unsigned char ballLocationA = 0x08;
unsigned char player1platform = 0x01; // sets the pattern displayed on columns
unsigned char player2platform = 0x80;
unsigned char platform1 = platformPos4; // grounds column to display pattern
unsigned char platform2 = platformPos4;



//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
b = c;
	}
	return 0;
}
//--------End find GCD function ----------------------------------------------
const unsigned char string[] = {'W', 'e', 'l', 'c', 'o', 'm', 'e', ' ', 't', 'o', ' ', 'P', 'o', 'n', 'g', '!', ' ', 'P', 'r', 'e', 's', 's', ' ', 't', 'h', 'e', ' ', 'b', 'u', 't', 't', 'o', 'n', ' ', 't', 'o', ' ', 's', 't', 'a', 'r', 't', ' ', ' ', ' ', ' ', ' '};
const unsigned char string2[] = {'3', ' ', '.', ' ', '.', ' ', '.' };
const unsigned char string3[] = {'2', ' ', '.', ' ', '.', ' ', '.' };
const unsigned char string4[] = {'1', ' ', '.', ' ', '.', ' ', '.' };
const unsigned char sizeString = sizeof(string) / sizeof(string[0]);
unsigned char count;
//--------Task scheduler data structure---------------------------------------
// Struct for Tasks represent a running process in our simple real-time operating system.
typedef struct _task {
	/*Tasks should have members that include: state, period,
		a measurement of elapsed time, and a function pointer.*/
	signed char state; //Task's current state
	unsigned long int period; //Task period
	unsigned long int elapsedTime; //Time elapsed since last task tick
	int (*TickFct)(int); //Task tick function
} task;

//--------End Task scheduler data structure-----------------------------------

//--------Shared Variables----------------------------------------------------
//unsigned char SM2_output = 0x00;
//unsigned char SM3_output = 0x00;
//unsigned char pause = 0;

//--------End Shared Variables------------------------------------------------

//--------User defined FSMs---------------------------------------------------
//Enumeration of states.
//enum SM1_States { SM1_wait, SM1_press, SM1_release };

// Monitors button connected to PA0. 
// When button is pressed, shared variable "pause" is toggled.

//Enumeration of states.


void resetGame() {
	ballLocationB = 0xEF;
	ballLocationA = 0x08;
	player1platform = 0x01; // sets the pattern displayed on columns
	player2platform = 0x80;
	platform1 = platformPos4;
	platform2 = platformPos4; // grounds column to display pattern
}

enum LCDStates {LCDstart, LCDwait, LCDdisplay} LCDstate;
unsigned char place = 0;
	
int LCDTick(int state) {
	unsigned char temp = place;
	
	switch(LCDstate) {
		case LCDstart:
		LCDstate = LCDwait;
		break;
		
		case LCDwait:
		LCDstate = LCDdisplay;
		break;
		
		case LCDdisplay:
		break;
		
		default:
		LCDstate = LCDstart;
		break;
	}
	
	switch(LCDstate) {
		case LCDstart:
		break;
		
		case LCDwait:
		break;
		
		case LCDdisplay:
		for (unsigned char i = 17; i < 17; ++i) {
			LCD_Cursor(i);
			LCD_WriteData(string[temp]);
			temp++;
			if (temp == sizeString) {
				temp = 0;
			}
		}
		place++;
		if (place == sizeString) {
			place = 0;
		}
		break;
		
		default:
		break;
	}
	return state;
}

enum DisplayStates {Dstart, Dwait, Dplayer1, Dball, Dplayer2 } Dstate;
	
int SMDisplayTick(int state) {
	
	switch(Dstate) {																						//transitions
		case Dstart:
		PORTA = 0xFF;
		Dstate = Dwait;
		break;
		
		case Dwait:
		Dstate = Dplayer1;
		break;
		
		case Dplayer1:
		Dstate = Dball;
		break;
		
		case Dball:
		Dstate = Dplayer2;
		break;
		
		case Dplayer2:
		Dstate = Dplayer1;
		break;
		
		default:
		Dstate = Dstart;
		break;
	}
	
	switch(Dstate) {																	//actions
		case Dstart:
		break;
		
		case Dwait:
		break;
		
		case Dplayer1:
		PORTB = platform1;
		PORTA = player1platform;
		break;
		
		case Dball:
		PORTB = ballLocationB;
		PORTA = ballLocationA;
/*		if (ballLocationA >> 1 == 0x01) {
			if ((platform1 != platformPos3) && (platform1 != platformPos4) && (platform1 != platformPos5)) {
			resetGame();
			}
			else {
				;
			}
		}
		else if (ballLocationA << 1 == 0x80) {
			if ((platform2 != platformPos3) && (platform2 != platformPos4) && (platform2 != platformPos5)) {
				resetGame();
			}
			else {
				;
			}
		}*/
		break;
		
		case Dplayer2:
		PORTB = platform2;
		PORTA = player2platform;
		break;
	}
	
	return Dstate;
};

enum BallStates {BallStart, BallWait, BallRelease, BallMoveDown, BallMoveUp, BallMoveLeft, BallMoveRight, BallReset } Ballstate;
	
int SMTick2(int state) {							//transitions
	
	switch(Ballstate) {
		case BallStart:
		Ballstate = BallWait;
		break;
		
		case BallWait:
		if (startButton) {
			Ballstate = BallRelease;
		}
		else {
			Ballstate = BallWait;
		}
		break;
		
		case BallRelease:
		if (startButton) {
			Ballstate = BallRelease;
		}
		else {
			Ballstate = BallMoveDown;
		}
		
																					//work here
		
		case BallMoveDown:
		if (ballLocationA == 0x01) {												
			Ballstate = BallMoveUp;
		}
		
		if (resetButton) {
			Ballstate = BallReset;
		}
		break;
		
		case BallMoveUp:
		if (ballLocationA == 0x80) {
			Ballstate = BallMoveDown;
		}
		if (resetButton) {
			Ballstate = BallReset;
		}
		break;
		
		case BallMoveLeft:
		if (ballLocationB == ballPos1) {
			Ballstate = BallMoveRight;
		}
		if (resetButton) {
			Ballstate = BallReset;
		}
		break;
		
		case BallMoveRight:
		if (ballLocationB == ballPos8) {
			Ballstate = BallMoveLeft;
		}
		if (resetButton) {
			Ballstate = BallReset;
		}
		break;
		
		case BallReset:
		Ballstate = BallWait;
		break;
		
		default:
		Ballstate = BallStart;
		break;
	}
	switch(Ballstate) {									//actions
		
		case BallStart:
		break;
		
		case BallWait:
		break;
		
		case BallRelease:
		break;
		
		case BallMoveDown:
		ballLocationA = ballLocationA >> 1;
		break;
		
		case BallMoveUp:
		ballLocationA = ballLocationA << 1;
		break;
		
		case BallMoveLeft1:
		ballLocationA = ballLocationA << 1;
		ballLocationB = (ballLocationB << 1 | 0x01);
		break;
		
		case BallMoveRight1:
		ballLocationA = ballLocationA << 1;
		ballLocationB = (ballLocationB >> 1 | 0x80);
		break;
		
		case BallReset:
		resetGame();
		break;
		
		default:
		break;
	}
	return Ballstate;
};

//Enumeration of states.
enum LED_States { LEDstart, LEDwait, LEDdisplay, LEDbpush, LEDbrelease  } LEDstate;

// Combine blinking LED outputs from SM2 and SM3, and output on PORTB
int Player1(int state) {
	// Local Variables
	//State machine transitions

// === Transitions ===
switch (LEDstate) {
	case LEDstart:
	LEDstate = LEDwait;
	break;
	
	case LEDwait:
	if ((buttonPushRight && ~buttonPushLeft) || (buttonPushLeft && ~buttonPushRight)) {
		LEDstate = LEDdisplay;
	}
	else {
		LEDstate = LEDwait;
	}
	break;
	
	case LEDdisplay:
	if (buttonPushRight && platform1 != 0xF8) {
		platform1 = (platform1 >> 1) | 0x80;
		LEDstate = LEDbpush;
	}
	else if (buttonPushLeft && platform1 != 0x1F) {
		platform1 = (platform1 << 1) | 0x01;
		LEDstate = LEDbpush;
	}
	else {
		LEDstate = LEDdisplay;
	}
	break;
	
	case LEDbpush:
	if (buttonPushRight || buttonPushLeft) {
		LEDstate = LEDbpush;
	}
	else {
		LEDstate = LEDbrelease;
	}
	break;
	
	case LEDbrelease:
	LEDstate = LEDwait;
	break;
	
	
	default:
	LEDstate = LEDstart;
	break;
}

// === Actions ===
switch (LEDstate) {
	case LEDstart:
	break;
	
	case LEDwait:
	break;
	
	case LEDdisplay:  
	break;
	
	case LEDbpush:
	break;
	
	case LEDbrelease:
	break;
	
	default:
	break;
}



return LEDstate;
};
enum Player2States {P2start, P2wait, P2display, P2bpush, P2brelease} P2state;

int Player2 (int state) {
switch (P2state) {
	case P2start:
	P2state = P2wait;
	break;
	
	case P2wait:
	if ((player2PushLeft && ~player2PushRight) || (player2PushRight && ~player2PushLeft)) {
		P2state = P2display;
	}
	else {
		P2state = P2wait;
	}
	//state = LEDdisplay;
	break;
	
	case P2display:
	if (player2PushLeft && platform2 != 0xF8) {
		platform2 = (platform2 >> 1) | 0x80;
		P2state = P2bpush;
	}
	else if (player2PushRight && platform2 != 0x1F) {
		platform2 = (platform2 << 1) | 0x01;
		P2state = P2bpush;
	}
	else {
		P2state = P2display;
	}
	break;
	
	case P2bpush:
	if (player2PushRight || player2PushLeft) {
		P2state = P2bpush;
	}
	else {
		P2state = P2brelease;
	}
	break;
	
	case P2brelease:
	P2state = P2wait;
	break;
	
	
	default:
	P2state = P2start;
	break;
}

// === Actions ===
switch (P2state) {
	case P2start:
	break;
	
	case P2wait:
	break;
	
	case P2display:
	break;
	
	case P2bpush:
	break;
	
	case P2brelease:
	break;
	
	default:
	break;
}



return P2state;
};

// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
// Set Data Direction Registers
// Buttons PORTA[0-7], set AVR PORTA to pull down logic
DDRA = 0xFF; PORTA = 0x00;
DDRB = 0xFF; PORTB = 0x00;
DDRC = 0x00; PORTC = 0xFF;
//DDRD = 0xFF; PORTD = 0x00;

LCD_init();
LCD_ClearScreen();
// . . . etc

// Period for the tasks
//unsigned long int SMTick1_calc = 50;
//unsigned long int SMTick3_calc = 1000;
unsigned long int Player1_calc = 10;
unsigned long int SMTick2_calc = 400;
unsigned long int SMDisplayTick_calc = 5;
unsigned long int Player2_calc = 10;
unsigned long int LCDTick_calc = 10;

//Calculating GCD
unsigned long int tmpGCD = 1;
//tmpGCD = findGCD(SMTick1_calc, SMTick2_calc);
//tmpGCD = findGCD(tmpGCD, SMTick3_calc);
//tmpGCD = findGCD(tmpGCD, SMTick4_calc);

//Greatest common divisor for all tasks or smallest time unit for tasks.
unsigned long int GCD = tmpGCD;

//Recalculate GCD periods for scheduler
//unsigned long int SMTick1_period = SMTick1_calc/GCD;
unsigned long int SMTick2_period = SMTick2_calc/GCD;
//unsigned long int SMTick3_period = SMTick3_calc/GCD;
unsigned long int Player1_period = Player1_calc/GCD;
unsigned long int Player2_period = Player2_calc/GCD;
unsigned long int SMDisplayTick_period = SMDisplayTick_calc/GCD;
unsigned long int LCDTick_period = LCDTick_calc/GCD;

//Declare an array of tasks 
static task task1, task2, task3, task4, task5;//task1, task2, task3, task1;
task *tasks[] = { &task1, &task2 , &task3, &task4, &task5};//&task1, &task2, &task3, &task1 };
const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

// Task 1
//task1.state = -1;//Task initial state.
//task1.period = SMTick1_period;//Task Period.
//task1.elapsedTime = SMTick1_period;//Task current elapsed time.
//task1.TickFct = &SMTick1;//Function pointer for the tick.

// Task 2
task2.state = -1;//Task initial state.
task2.period = SMTick2_period;//Task Period.
task2.elapsedTime = SMTick2_period;//Task current elapsed time.
task2.TickFct = &SMTick2;//Function pointer for the tick.

// Task 3
//task3.state = -1;//Task initial state.
//task3.period = SMTick3_period;//Task Period.
//task3.elapsedTime = SMTick3_period; // Task current elasped time.
//task3.TickFct = &SMTick3; // Function pointer for the tick.

// Task 4
task1.state = -1;//Task initial state.
task1.period = Player1_period;//Task Period.
task1.elapsedTime = Player1_period; // Task current elasped time.
task1.TickFct = &Player1; // Function pointer for the tick.

task3.state = -1;
task3.period = SMDisplayTick_period;
task3.elapsedTime = SMDisplayTick_period;
task3.TickFct = &SMDisplayTick;

task4.state = -1;
task4.period = Player2_period;
task4.elapsedTime = Player2_period;
task4.TickFct = &Player2;

task5.state = -1;
task5.period = LCDTick_period;
task5.elapsedTime = LCDTick_period;
task5.TickFct = &LCDTick;

// Set the timer and turn it on
TimerSet(GCD);
TimerOn();



unsigned short i; // Scheduler for-loop iterator
while(1) {
	// Scheduler code
	for ( i = 0; i < numTasks; i++ ) {
		// Task is ready to tick
		if ( tasks[i]->elapsedTime == tasks[i]->period ) {
			// Setting next state for task
			tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
			// Reset the elapsed time for next tick.
			tasks[i]->elapsedTime = 0;
		}
		tasks[i]->elapsedTime += 1;
	}
	while(!TimerFlag);
	TimerFlag = 0;
}

// Error: Program should not exit!
return 0;
}
